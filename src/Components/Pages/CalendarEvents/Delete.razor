@page "/calendar-events/delete/{id:guid}"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.EntityFrameworkCore
@using Blazing.Data
@inject IDbContextFactory<Blazing.Data.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

@attribute [Authorize]
@attribute [StreamRendering]
@implements IAsyncDisposable

<PageTitle>Delete</PageTitle>

@if (calendarEvent is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h1>Delete</h1>

    <p>Are you sure you want to delete this?</p>
    <div>
        <h2>CalendarEvent</h2>
        <hr />
        @if (calendarEvent is null)
        {
            <p><em>Loading...</em></p>
        }
        else {
            <dl class="row">
                <dt class="col-sm-2">Title</dt>
                <dd class="col-sm-10">@calendarEvent.Title</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Date</dt>
                <dd class="col-sm-10">@calendarEvent.Date</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Location</dt>
                <dd class="col-sm-10">@calendarEvent.Location</dd>
            </dl>
            <dl class="row">
                <dt class="col-sm-2">Description</dt>
                <dd class="col-sm-10">@calendarEvent.Description</dd>
            </dl>
            <EditForm method="post" Model="calendarEvent" OnValidSubmit="DeleteCalendarEvent" FormName="delete" Enhance>
                <button type="submit" class="btn btn-danger">Delete</button> |
                <a href="/calendar-events">Back to List</a>
            </EditForm>
        }
    </div>
}

@code {
    private CalendarEvent? calendarEvent;
    private ApplicationDbContext? dbContext;

    [Parameter]
    public Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        dbContext = DbFactory.CreateDbContext();
        calendarEvent = await dbContext.CalendarEvents.FirstOrDefaultAsync(m => m.Id == Id);
        if (calendarEvent is null) NavigationManager.NavigateTo("notfound");
    }

    private async Task DeleteCalendarEvent()
    {
        dbContext!.CalendarEvents.Remove(calendarEvent!);
        await dbContext.SaveChangesAsync();
        NavigationManager.NavigateTo("/calendar-events");
    }

    public async ValueTask DisposeAsync() => await dbContext!.DisposeAsync();
}
